{
	"ThisIsOnlyForLegalComments": {
        "prefix": "xxxxxxxxx",
		"body": [
			"// Place your snippets for lua here. Each snippet is defined under a snippet name and has a prefix, body and",
			"// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:",
			"// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the",
			"// same ids are connected.",
			"// Example:",
			"// \"Print to console\": {",
			"// 	\"prefix\": \"log\",",
			"// 	\"body\": [",
			"// 		\"console.log('$1');\",",
			"// 		\"$2\"",
			"// 	],",
			"// 	\"description\": \"Log output to console\"",
			"// }",
			"// https://code.visualstudio.com/docs/editor/userdefinedsnippets"
		],
        "description": "ThisIsOnlyForLegalComments"
	},
	"test111": {
		"prefix": "unique",
		"body": "hello ${1:world} ${2|one,tow,three|} ${TM_FILENAME/(.*)\\..+$/${1:XXXS}/}",
		"description": "test learning"
	},
	"Actions": {
		"prefix":"CCSequence",
		"body":[
			"local actions = CCArray:create();",
			"actions:addObject($0);",
			"self:runAction(CCSequence:create(actions))"
		],
		"description": "建立Cocos2dx Sequence動畫"
	},
	"CCDelay": {
		"prefix":"CCDelayTime",
		"body":[
			"CCDelayTime:create($0),"
		],
		"description": "建立DelayTime"
	},
	"CCCallFunc": {
		"prefix":"CCCallFunc",
		"body":[
			"CCCallFunc:create(function()",
				"$0",
			"end),"
		],
		"description": "建立 Callback func"
	},
	"SimpleClass":{
		"prefix": "simple_class_make",
		"body": [
			"local ${TM_FILENAME_BASE} = class(\"${TM_FILENAME_BASE}\");",
			"",
			"function ${TM_FILENAME_BASE}.create(...)",
			"    return ${TM_FILENAME_BASE}.new(...);",
			"end",
			"",
			"function ${TM_FILENAME_BASE}:ctor(...)",
			"end",
			"",
			"return ${TM_FILENAME_BASE};"
		]
	},
	"Class":{
		"prefix":"class_make",
		"body":[
			"--------------------------------------------------    require   --------------------------------------------------",
			"",
			"-------------------------------------------------- const member --------------------------------------------------",
			"",
			"-------------------------------------------------- class define --------------------------------------------------",
			"local ${TM_FILENAME/(.*)\\..+$/$1/} = class(\"${TM_FILENAME/(.*)\\..+$/$1/}\", function(...)",
			"    return {};",
			"end);",
			"",
			"--------------------------------------------------  constructor --------------------------------------------------",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}.create(...)",
				"    return ${TM_FILENAME/(.*)\\..+$/$1/}.new(...);",
			"end;",
			"",
			"-- function ${TM_FILENAME/(.*)\\..+$/$1/}:getInstance()",
			"--     if self._instance == nil then",
			"--         self._instance = ${TM_FILENAME/(.*)\\..+$/$1/}.new();",
			"--     end",
			"--     return self._instance;",
			"-- end",
			"",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:ctor(...)",
			"    -- member",
			"",
			"    -- init",
			"    self:setNodeEventEnabled(true);",
			"end",
			"",
			"--------------------------------------------------  life cycle  --------------------------------------------------",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:onEnter()",
			"end",
			"",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:onExit()",
			"end",
			"",
			"--------------------------------------------------    public    --------------------------------------------------",
			"",
			"--------------------------------------------------   register   --------------------------------------------------",
			"",
			"--------------------------------------------------    event     --------------------------------------------------",
			"",
			"--------------------------------------------------    logic     --------------------------------------------------",
			"",
			"--------------------------------------------------     tool     --------------------------------------------------",
			"",
			"--------------------------------------------------    create    --------------------------------------------------",
			"",
			"return ${TM_FILENAME/(.*)\\..+$/$1/};"
		],
		"description": "建立類別"
	},
	"FuncSelf": {
		"prefix":"fsf:func_self",
		"body":[
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:$0()",
			"end"
		],
		"description": "空的成員函數"
	},
	"FuncSelect":{
		"prefix":"func_select",
		"body": [
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:${CLIPBOARD}()",
			"    $0",
			"end"
		],
		"description": "快速建立成員函數（函數名稱必須要先複製）"
	},
	"FuncStatic": {
		"prefix":"func_static",
		"body":[
			"function ${TM_FILENAME/(.*)\\..+$/$1/}.$0()",
			"end"
		],
		"description": "空的靜態函數"
	},
	"FunctionLocal": {
		"prefix":"fl:function local",
		"body":[
			"local function $0()",
			"end"
		],
		"description": "普通函式"
	},
	"FunctionAnnonymous": {
		"prefix":"fa:function annonymous",
		"body":[
			"function() $0 end"
		],
		"description": "匿名函式"
	},
	"Button": {
		"prefix":"button_make",
		"body":[
			"local $1 = CONFIG.Tools.UI.createSoundBtn({",
			"    normal = CONFIG.BTN_PATH .. \"$2.png\",",
			"    callback = function()",
			"    end,",
			"    priority = -128,",
			"});",
			"$1:setPosition(0, 0);",
			"self:addChild($1);"
		],
		"description": "按鈕"
	},
	"Center": {
		"prefix": "center_abbreviation",
		"body":[
			"display.cx, display.cy"
		],
		"description": "中心點簡寫"
	},
	"DisplaySize": {
		"prefix": "display_size_abbreviation",
		"body":[
			"display.width$0, display.height"
		],
		"description": "螢幕尺寸簡寫"
	},
	"ForeverActionSequence":{
		"prefix": "forever_sequence",
		"body":[
			"CCRepeatForever:create(transition.sequence{",
			"    $0",
			"})"
		],
		"description": "永久循環動作列"
	},
	"DemoClass":{
		"prefix": "demo_class_make",
		"body":[
			"--------------------------------------------------    require   --------------------------------------------------",
			"local ButtonListView = require(\"utilityDemo.ButtonListView\");",
			"local UICellListView = require(\"utilityDemo.UICellListView\");",
			"",
			"-------------------------------------------------- const member --------------------------------------------------",
			"",
			"-------------------------------------------------- class define --------------------------------------------------",
			"local ${TM_FILENAME/(.*)\\..+$/$1/} = class(\"${TM_FILENAME/(.*)\\..+$/$1/}\", function(...)",
				"    return CCLayer:create();",
			"end);",
			"",
			"--------------------------------------------------  constructor --------------------------------------------------",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}.create(...)",
				"    return ${TM_FILENAME/(.*)\\..+$/$1/}.new(...);",
			"end",
			"",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:ctor(...)",
			"    -- member",
			"    self.removeCallBack = nil;",
			"",
			"    -- init",
			"    self:setNodeEventEnabled(true);",
			"    local buttonListView = self:_createButtonListView();",
			"    self:_registerButtonEvents(buttonListView);",
			"    local uiListView = self:_createUIListView();",
			"    self:_registerUICellEvents(uiListView);",
			"end",
			"",
			"--------------------------------------------------  life cycle  --------------------------------------------------",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:onEnter()",
			"end",
			"",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:onExit()",
			"end",
			"",
			"--------------------------------------------------    public    --------------------------------------------------",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:setRemoveCallBack(func)",
			"    self.removeCallBack = func;",
			"end",
			"",
			"--------------------------------------------------   register   --------------------------------------------------",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:_registerButtonEvents(buttonListView)",
			"    buttonListView:addButton(\"離開\", function()",
			"        self:_onTouchBackBtn();",
			"    end);",
			"end",
			"",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:_registerUICellEvents(uiListView)",
			"    uiListView:addButton(\"離開\", function()",
			"        self:_onTouchBackBtn();",
			"    end);",
			"",
			"    local currentIsOn = true;",
			"    uiListView:addToggle(\"開關\", function(isOn)",
			"    end, currentIsOn);",
			"",
			"    local currentValue, minValue, maxValue = 50, 0, 100;",
			"    uiListView:addSlider(\"數值滑桿\", function(value)",
			"    end, currentValue, minValue, maxValue);",
			"end",
			"",
			"--------------------------------------------------    event     --------------------------------------------------",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:_onTouchBackBtn()",
			"    if type(self.removeCallBack) ~= 'function' then",
			"        return;",
			"    end",
			"    self.removeCallBack();",
			"end",
			"",
			"--------------------------------------------------    logic     --------------------------------------------------",
			"",
			"--------------------------------------------------     tool     --------------------------------------------------",
			"",
			"--------------------------------------------------    create    --------------------------------------------------",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:_createButtonListView()",
			"    local buttonListView = ButtonListView.create(ButtonListView.SCROLL_DIRECTION.VERTICAL);",
			"    local VIEW_HEIGHT = 100;",
			"    buttonListView:setViewSize(240, VIEW_HEIGHT);",
			"    buttonListView:setPosition(0, display.top - VIEW_HEIGHT);",
			"    self:addChild(buttonListView);",
			"    return buttonListView;",
			"end",
			"",
			"function ${TM_FILENAME/(.*)\\..+$/$1/}:_createUIListView()",
			"    local listView = UICellListView.create();",
			"    listView:setPosition(0, 0);",
			"    listView:setViewSizeHeightCount(10);",
			"    self:addChild(listView);",
			"    return listView;",
			"end",
			"",
			"return ${TM_FILENAME/(.*)\\..+$/$1/};"
		],
		"description": "創建預設utilityDemoLayer"
	}
}
